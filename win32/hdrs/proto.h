/* 
   Copyright (c) 1991-1999 Thomas T. Wetmore IV

   Permission is hereby granted, free of charge, to any person
   obtaining a copy of this software and associated documentation
   files (the "Software"), to deal in the Software without
   restriction, including without limitation the rights to use, copy,
   modify, merge, publish, distribute, sublicense, and/or sell copies
   of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be
   included in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
   BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.
*/
/* created 05 Jan 2000 by Paul B. McBride (pmcbride@tiac.net) */
/* WARNING: when compiling yacc.c, define YACC_C, so that prototypes
 * for functions are not defined. This assumes that INTs and pointers
 * are the same size. To correct the situation, add casts to all
 * arguments and return values in yacc.y and then re-yacc it.
 */
#ifndef _PROTO_H
#define _PROTO_H
/* INDISEQ union_indiseq(void); */
addexref (INT);
addfxref (INT);
addixref (INT);
addkey (BTREE, FKEY, RKEY, FKEY);
addsxref (INT);
addxxref (INT);
add_browse_list (STRING, INDISEQ);
add_char (STRING, INT *, INT, INT);
add_child_line (INT, NODE);
add_menu (void);
add_pvalues (PVALUE, PVALUE, BOOLEAN *);
add_spouse_line (INT, NODE, NODE);
add_string (STRING, INT *, INT, STRING);
adjust_cols (STRING);
advanced_person_edit (NODE);
alloc_out (STRING);
append_indiseq (INDISEQ, STRING, STRING, WORD, BOOLEAN, BOOLEAN);
assign_iden (TABLE, STRING, WORD);
aux_browse (NODE);
back_list (LIST, WORD);
BLOCK allocblock (void);
BLOCK crtblock (BTREE);
BOOLEAN addfile (BTREE, RKEY, STRING);
BOOLEAN addrecord (BTREE, RKEY, RECORD, INT);
BOOLEAN add_event (void);
BOOLEAN add_linked_indi (NODE);
BOOLEAN add_name (STRING, STRING);
BOOLEAN add_other (void);
BOOLEAN add_record (STRING, STRING, BOOLEAN (*)(), STRING, STRING (*)(), INT (*)(), INT (*)());
BOOLEAN add_refn (STRING, STRING);
BOOLEAN add_spouse (NODE, NODE, BOOLEAN);
BOOLEAN allwhite (STRING);
BOOLEAN archive (BTREE, BLOCK);
BOOLEAN archive_in_file (void);
BOOLEAN ask_yes_or_no (STRING);
BOOLEAN ask_yes_or_no_msg (STRING, STRING);
BOOLEAN cacheindex (BTREE, INDEX);
BOOLEAN closebtree (BTREE);
BOOLEAN delete_indiseq (INDISEQ, STRING, STRING, INT);
BOOLEAN edit_mapping (INT);
BOOLEAN edit_valtab (STRING, TABLE *, INT, STRING);
BOOLEAN element_indiseq (INDISEQ, INT, STRING *, STRING *);
BOOLEAN empty_list (LIST);
BOOLEAN equal_node (NODE, NODE);
BOOLEAN equal_nodes (NODE, NODE, BOOLEAN, BOOLEAN);
BOOLEAN equal_tree (NODE, NODE);
BOOLEAN evaluate_cond (PNODE, TABLE, BOOLEAN *);
BOOLEAN exactmatch (STRING, STRING);
BOOLEAN expand_traverse (NODE);
BOOLEAN fndel (SEQUENCE, ELEMENT, INT *);
BOOLEAN getfile (BTREE, RKEY, STRING);
BOOLEAN getnamerec (STRING);
BOOLEAN getrefnrec (STRING);
BOOLEAN iistype (PNODE, INT);
BOOLEAN import_from_file (void);
BOOLEAN initbtree (STRING);
BOOLEAN init_valtab_from_file (STRING, TABLE, INT, STRING *);
BOOLEAN init_valtab_from_rec (STRING, TABLE, INT, STRING *);
BOOLEAN init_valtab_from_string (STRING, TABLE, INT, STRING *);
BOOLEAN in_indiseq (INDISEQ, STRING);
BOOLEAN in_string (INT, STRING);
BOOLEAN in_table (TABLE, STRING);
BOOLEAN isletter (INT);
BOOLEAN isnumeric (STRING);
BOOLEAN iso_list (NODE, NODE);
BOOLEAN iso_nodes (NODE, NODE, BOOLEAN, BOOLEAN);
BOOLEAN isrecord (BTREE, RKEY);
BOOLEAN iswhite (INT);
BOOLEAN is_pvalue (PVALUE);
BOOLEAN is_record_pvalue (PVALUE);
BOOLEAN is_zero (PVALUE);
BOOLEAN lex_valtab (int, int, int, int);
BOOLEAN mkalldirs (char *);
BOOLEAN name_to_list (STRING, LIST, INT *, INT *);
BOOLEAN node_to_file (INT, NODE, STRING, BOOLEAN, TRANTABLE);
BOOLEAN numeric_pvalue (PVALUE);
BOOLEAN openxref (void);
BOOLEAN piecematch (STRING, STRING);
BOOLEAN place_to_list (STRING, LIST, INT *);
BOOLEAN pointer_value (STRING);
BOOLEAN readxrefs (void);
BOOLEAN remove_child (NODE, NODE, BOOLEAN);
BOOLEAN remove_name (STRING, STRING);
BOOLEAN remove_refn (STRING, STRING);
BOOLEAN remove_spouse (NODE, NODE, BOOLEAN);
BOOLEAN replace_fam (NODE, NODE, STRING *);
BOOLEAN replace_indi (NODE, NODE, STRING *);
BOOLEAN replace_name (STRING, STRING, STRING);
BOOLEAN reserved (STRING, INT *);
BOOLEAN resolve_traverse (NODE);
BOOLEAN retrieve_file (STRING, STRING);
BOOLEAN sfndel (SEQUENCE, ELEMENT, INT *);
BOOLEAN store_file (STRING, STRING);
BOOLEAN store_record (STRING, STRING, INT);
BOOLEAN string_to_line (STRING *, INT *, STRING *, STRING *, STRING *, STRING *);
BOOLEAN swap_children (NODE, NODE);
BOOLEAN swap_families (NODE);
BOOLEAN symbolic_link (STRING);
BOOLEAN translate_string (TRANTABLE, STRING, STRING, INT);
BOOLEAN traverse (BTREE, INDEX, BOOLEAN(*)(), BOOLEAN(*)());
BOOLEAN traverse_nodes (NODE, BOOLEAN (*)());
BOOLEAN trytocreate (STRING);
BOOLEAN validate_gedcom (FILE *);
BOOLEAN valid_even_tree (NODE, STRING *, NODE);
BOOLEAN valid_fam (NODE, STRING *, NODE);
BOOLEAN valid_indi (NODE, STRING *, NODE);
BOOLEAN valid_name (STRING);
BOOLEAN valid_othr_tree (NODE, STRING *, NODE);
BOOLEAN valid_sour_tree (NODE, STRING *, NODE);
/* BOOLEAN valid_sour_tree(void); */
BOOLEAN value_in_nodes (NODE, STRING);
BOOLEAN value_to_list (STRING, LIST, INT *, STRING);
browse (NODE);
bsd_mvwgetstr (WINDOW *, INT, INT, STRING);
BTREE openbtree (STRING, BOOLEAN, BOOLEAN);
CACHEEL even_to_cacheel (NODE);
CACHEEL fam_to_cacheel (NODE);
CACHEEL indi_to_cacheel (NODE);
CACHEEL key_to_even_cacheel (STRING);
CACHEEL key_to_fam_cacheel (STRING);
CACHEEL key_to_indi_cacheel (STRING);
CACHEEL key_to_othr_cacheel (STRING);
CACHEEL key_to_sour_cacheel (STRING);
CACHEEL othr_to_cacheel (NODE);
CACHEEL sour_to_cacheel (NODE);
cache_stats (void);
char *__allocate (int, STRING, int);
clearw (void);
closexref (void);
close_lifelines (void);
cmpsqueeze (STRING, STRING);
coerce_pvalue (INT, PVALUE, BOOLEAN *);
copy_and_translate (FILE *, INT, FILE *, INT, TRANTABLE);
create_windows (void);
dbprintf (STRING, INT, INT, INT, INT, INT, INT, INT);
decr_pvalue (PVALUE, BOOLEAN *);
delete_fam (NODE);
delete_indi (NODE, BOOLEAN);
delete_table (TABLE, STRING);
del_menu (void);
display_screen (INT);
div_pvalues (PVALUE, PVALUE, BOOLEAN *);
do_edit (void);
ELEMENT delseq (SEQUENCE, ELEMENT);
ELEMENT elseq (SEQUENCE, INT);
ELEMENT hdelseq (SEQUENCE);
ELEMENT tdelseq (SEQUENCE);
enqueue_list (LIST, WORD);
eq_conform_pvalues (PVALUE, PVALUE, BOOLEAN *);
eq_pvalues (PVALUE, PVALUE, BOOLEAN *);
even_to_cache (NODE);
even_to_dbase (NODE);
exit_it (INT);
expand_tree (NODE);
exp_pvalues (PVALUE, PVALUE, BOOLEAN *);
extract_date (STRING, INT *, INT *, INT *);
extra_menu (void);
fam_browse (NODE);
fam_to_cache (NODE);
fam_to_dbase (NODE);
FILE *ask_for_file (STRING, STRING, STRING *, STRING, STRING);
FILE *fopenpath (STRING, STRING, STRING, STRING, STRING *);
filecopy (FILE *, int, FILE *);
final_cleanup (void);
finishinterp (void);
finishrassa (void);
FKEY path2fkey (STRING);
FLOAT bool_to_float (BOOLEAN);
format_indiseq (INDISEQ, BOOLEAN, BOOLEAN);
free_node (NODE);
free_nodes (NODE);
gen_gedcom (INDISEQ);
get_refns (STRING, INT *, STRING **, INT);
ge_pvalues (PVALUE, PVALUE, BOOLEAN *);
growexrefs (void);
growfxrefs (void);
growixrefs (void);
growsxrefs (void);
growxxrefs (void);
gt_pvalues (PVALUE, PVALUE, BOOLEAN *);
/* handle_err (STRING, WORD, WORD, WORD, WORD); */
/* handle_warn (STRING, WORD, WORD, WORD, WORD); */
inchar (void);
incr_pvalue (PVALUE, BOOLEAN *);
INDEX crtindex (BTREE);
INDEX getindex (BTREE, FKEY);
INDEX readindex (STRING, FKEY);
INDISEQ ancestor_indiseq (INDISEQ);
INDISEQ ask_for_indiseq (STRING, INT *);
INDISEQ ask_for_indi_list (STRING, BOOLEAN);
INDISEQ ask_for_indi_list_once (STRING, INT *);
INDISEQ child_indiseq (INDISEQ);
INDISEQ choose_list_from_indiseq (STRING, INDISEQ);
INDISEQ copy_indiseq (INDISEQ);
INDISEQ create_indiseq (void);
INDISEQ descendent_indiseq (INDISEQ);
INDISEQ difference_indiseq (INDISEQ, INDISEQ);
INDISEQ fam_to_children (NODE);
INDISEQ fam_to_fathers (NODE);
INDISEQ fam_to_mothers (NODE);
INDISEQ find_named_seq (STRING);
INDISEQ indiseq_list_interact (WINDOW *, STRING, INDISEQ);
INDISEQ indi_to_children (NODE);
INDISEQ indi_to_families (NODE, BOOLEAN);
INDISEQ indi_to_fathers (NODE);
INDISEQ indi_to_mothers (NODE);
INDISEQ indi_to_spouses (NODE);
INDISEQ intersect_indiseq (INDISEQ, INDISEQ);
INDISEQ name_to_indiseq (STRING);
INDISEQ parent_indiseq (INDISEQ);
INDISEQ refn_to_indiseq (STRING);
INDISEQ sibling_indiseq (INDISEQ, BOOLEAN);
INDISEQ spouse_indiseq (INDISEQ);
INDISEQ union_indiseq (INDISEQ, INDISEQ);
indi_browse (NODE);
indi_to_cache (NODE);
indi_to_dbase (NODE);
initcache (BTREE, INT);
initinterp (void);
initlex (int);
initrassa (void);
initxref (void);
init_all_windows (void);
init_browse_lists (void);
init_caches (void);
init_display_fam (NODE);
init_display_indi (NODE);
init_lifelines (void);
init_mapping (void);
init_screen (void);
/* insert_pvtable (TABLE, STRING, INT, WORD); */
/* insert_table (TABLE, STRING, WORD); */
int add_node_to_direct(CACHE, NODE);
INT ask_for_char (STRING, STRING, STRING);
INT ask_for_char_msg (STRING, STRING, STRING, STRING);
INT ask_for_int (STRING);
INT bool_to_int (BOOLEAN);
INT browse_2fam (NODE *, NODE *, NODE *, NODE *, INDISEQ *);
INT browse_fam (NODE *, NODE *, NODE *, NODE *, INDISEQ *);
INT browse_indi (NODE *, NODE *, NODE *, NODE *, INDISEQ *);
INT browse_list (NODE *, NODE *, NODE *, NODE *, INDISEQ *);
INT browse_pedigree (NODE *, NODE *, NODE *, NODE *, INDISEQ *);
INT browse_tandem (NODE *, NODE *, NODE *, NODE *, INDISEQ *);
INT chartype (INT);
INT choose_from_list (STRING, INT, STRING *);
INT choose_one_from_indiseq (STRING, INDISEQ);
INT file_to_line (FILE *, TRANTABLE, INT *, STRING *, STRING *, STRING *, STRING *);
INT getfinitial (STRING);
INT getpivot (INT, INT);
INT get_decimal (STRING);
INT get_hexidecimal (STRING);
INT hexvalue (INT);
INT incache (BTREE, FKEY);
INT indiseq_interact (WINDOW *, STRING, INDISEQ);
INT key_compare (SORTEL, SORTEL);
INT length_list (LIST);
INT length_nodes (NODE);
INT list_interact(WINDOW *, STRING, INT, STRING *);
int llmkdir (STRING);
INT ll_tolower (INT);
INT ll_toupper (INT);
int lowyylex (void);
int maperror(INT, INT, STRING);
int namecmp (STRING, STRING);
INT name_compare (SORTEL, SORTEL);
INT node_strlen (INT, NODE);
INT num_evens (void);
INT num_fams (void);
INT num_fam_xrefs (NODE);
INT num_indis (void);
INT num_othrs (void);
INT num_params (PNODE);
INT num_sours (void);
INT num_spouses (NODE);
int paint_main_screen(void);
INT record_letter (STRING);
INT tree_strlen (INT, NODE);
INT value_compare (SORTEL, SORTEL);
INT val_to_sex (NODE);
INT xref_to_index (STRING);
int yylex(void);
int yyparse(void);
interact (WINDOW *, STRING);
INTERPTYPE interpret (PNODE, TABLE, PVALUE *);
INTERPTYPE interp_call (PNODE, TABLE, WORD *);
INTERPTYPE interp_children (PNODE, TABLE, WORD *);
INTERPTYPE interp_families (PNODE, TABLE, WORD *);
INTERPTYPE interp_fathers (PNODE, TABLE, WORD *);
INTERPTYPE interp_foreven (PNODE, TABLE, WORD *);
INTERPTYPE interp_forfam (PNODE, TABLE, WORD *);
INTERPTYPE interp_forindi (PNODE, TABLE, WORD *);
INTERPTYPE interp_forlist (PNODE, TABLE, WORD *);
INTERPTYPE interp_fornodes (PNODE, TABLE, WORD *);
INTERPTYPE interp_fornotes (PNODE, TABLE, WORD *);
INTERPTYPE interp_forothr (PNODE, TABLE, WORD *);
INTERPTYPE interp_forsour (PNODE, TABLE, WORD *);
INTERPTYPE interp_if (PNODE, TABLE, WORD *);
INTERPTYPE interp_indisetloop (PNODE, TABLE, WORD *);
INTERPTYPE interp_mothers (PNODE, TABLE, WORD *);
INTERPTYPE interp_parents (PNODE, TABLE, WORD *);
INTERPTYPE interp_spouses (PNODE, TABLE, WORD *);
INTERPTYPE interp_traverse (PNODE, TABLE, WORD *);
INTERPTYPE interp_while (PNODE, TABLE, WORD *);
interp_main (void);
interp_program (STRING, INT, WORD *, INT, STRING *, STRING);
join_fam (NODE, NODE, NODE, NODE, NODE, NODE);
join_indi (NODE, NODE, NODE, NODE, NODE, NODE, NODE);
keysort_indiseq (INDISEQ);
key_util (void);
le_pvalues (PVALUE, PVALUE, BOOLEAN *);
LIST create_list (void);
list_browse (INDISEQ, INT, INT, INT);
lock_cache (CACHEEL);
lt_pvalues (PVALUE, PVALUE, BOOLEAN *);
main (INT, char **);
main_menu (void);
make_list_empty (LIST);
merge_fam_links (NODE, NODE, NODE, NODE, INT);
message (char *);
mod_pvalues (PVALUE, PVALUE, BOOLEAN *);
movefiles (STRING, STRING);
/* mprintf (STRING, INT, INT, INT, INT, INT, INT, INT); */
mul_pvalues (PVALUE, PVALUE, BOOLEAN *);
namesort_indiseq (INDISEQ);
neg_pvalue (PVALUE, BOOLEAN *);
newmaster (BTREE, INDEX);
new_name_browse_list (STRING, STRING);
new_write_node (INT, NODE, BOOLEAN);
nextfkey (BTREE);
ne_pvalues (PVALUE, PVALUE, BOOLEAN *);
NODE add_child (NODE, NODE);
NODE add_family (NODE, NODE, NODE);
NODE add_indi_by_edit (void);
NODE add_unlinked_indi (NODE);
NODE alloc_node (void);
NODE ask_for_fam (STRING, STRING);
NODE ask_for_indi (STRING, BOOLEAN, BOOLEAN);
NODE ask_for_indi_once (STRING, BOOLEAN, INT *);
NODE ask_for_record (STRING, INT);
NODE children_nodes (NODE, int);
NODE choose_child (NODE, NODE, STRING, STRING, BOOLEAN);
NODE choose_family (NODE, STRING, STRING, BOOLEAN);
NODE choose_father (NODE, NODE, STRING, STRING, BOOLEAN);
NODE choose_mother (NODE, NODE, STRING, STRING, BOOLEAN);
NODE choose_spouse (NODE, STRING, STRING);
NODE copy_node (NODE);
NODE copy_nodes (NODE, BOOLEAN, BOOLEAN);
NODE create_node (STRING, STRING, STRING, NODE);
NODE difference_nodes (NODE, NODE, BOOLEAN);
NODE edit_family (NODE);
NODE edit_indi (NODE);
NODE eval_fam (PNODE, TABLE, BOOLEAN *, CACHEEL *);
NODE eval_indi (PNODE, TABLE, BOOLEAN *, CACHEEL *);
NODE fam_to_first_chil (NODE);
NODE fam_to_husb (NODE);
NODE fam_to_last_chil (NODE);
NODE fam_to_wife (NODE);
NODE father_nodes (NODE);
NODE file_to_node (STRING, TRANTABLE, STRING *, BOOLEAN *);
NODE find_node (NODE, STRING, STRING, NODE *);
NODE find_tag (NODE, STRING);
NODE first_fp_to_node (FILE *, BOOLEAN, TRANTABLE, STRING *, BOOLEAN *);
NODE format_and_choose_indi (INDISEQ, BOOLEAN, BOOLEAN, BOOLEAN, STRING, STRING);
NODE indi_to_famc (NODE);
NODE indi_to_fath (NODE);
NODE indi_to_moth (NODE);
NODE indi_to_next_sib (NODE);
NODE indi_to_prev_sib (NODE);
NODE intersect_nodes (NODE, NODE, BOOLEAN);
NODE key_to_even (STRING);
NODE key_to_fam (STRING);
NODE key_to_indi (STRING);
NODE key_to_othr (STRING);
NODE key_to_record (STRING, INT);
NODE key_to_sour (STRING);
NODE merge_two_fams (NODE, NODE);
NODE merge_two_indis (NODE, NODE, BOOLEAN);
NODE mother_nodes (NODE);
NODE next_fp_to_node (FILE *, BOOLEAN, TRANTABLE, STRING *, BOOLEAN *);
NODE node_to_node (NODE, INT *);
NODE parents_nodes (NODE);
NODE refn_to_record (STRING, INT);
NODE remove_dupes (NODE, NODE);
NODE sort_children (NODE, NODE);
NODE string_to_node (STRING);
NODE union_nodes (NODE, NODE, BOOLEAN, BOOLEAN);
NODE unique_nodes (NODE, BOOLEAN);
node_to_cache (CACHE, NODE);
node_to_dbase (NODE, STRING);
num_conform_pvalues (PVALUE, PVALUE, BOOLEAN *);
othr_to_cache (NODE);
othr_to_dbase (NODE);
paint_aux_screen (void);
paint_list_screen (void);
paint_one_fam_screen (void);
paint_one_per_screen (void);
paint_ped_screen (void);
paint_two_fam_screen (void);
paint_two_per_screen (void);
parse_file (STRING, LIST);
partition (INT, INT, SORTEL);
ped_browse (NODE);
place_cursor (void);
place_std_msg (void);
#ifndef YACC_C
PNODE break_node (void);
PNODE call_node (STRING, PNODE);
PNODE children_node (PNODE, STRING, STRING, PNODE);
PNODE continue_node (void);
PNODE create_pnode (INT);
/* PNODE families_node (PNODE, STRING, STRING, STRING, PNODE); */
/* PNODE fathers_node (PNODE, STRING, STRING, STRING, PNODE); */
PNODE fcons_node (FLOAT);
/* PNODE fdef_node (STRING, PNODE, PNODE); */
PNODE foreven_node (STRING, STRING, PNODE);
PNODE forfam_node (STRING, STRING, PNODE);
/* PNODE forindiset_node (PNODE, STRING, STRING, STRING, PNODE); */
PNODE forindi_node (STRING, STRING, PNODE);
PNODE forlist_node (PNODE, STRING, STRING, PNODE);
PNODE fornodes_node (PNODE, STRING, PNODE);
PNODE fornotes_node (PNODE, STRING, PNODE);
PNODE forothr_node (STRING, STRING, PNODE);
PNODE forsour_node (STRING, STRING, PNODE);
PNODE func_node (STRING, PNODE);
PNODE icons_node (INT);
/* PNODE iden_node (STRING); */
PNODE if_node (PNODE, PNODE, PNODE);
/* PNODE mothers_node (PNODE, STRING, STRING, STRING, PNODE); */
/* PNODE parents_node (PNODE, STRING, STRING, PNODE); */
/* PNODE proc_node (STRING, PNODE, PNODE); */
PNODE return_node (PNODE);
/* PNODE spouses_node (PNODE, STRING, STRING, STRING, PNODE); */
PNODE string_node (STRING);
PNODE traverse_node (PNODE, STRING, STRING, PNODE);
PNODE while_node (PNODE, PNODE);
#endif
poutput (STRING);
/* prog_error (PNODE, STRING, WORD, WORD, WORD); */
push_list (LIST, WORD);
putheader (BTREE, BLOCK);
putindex (BTREE, INDEX);
PVALUE copy_pvalue (PVALUE);
PVALUE create_pvalue (INT, WORD);
PVALUE evaluate (PNODE, TABLE, BOOLEAN *);
PVALUE evaluate_func (PNODE, TABLE, BOOLEAN *);
PVALUE evaluate_iden (PNODE, TABLE, BOOLEAN *);
PVALUE evaluate_ufunc (PNODE, TABLE, BOOLEAN *);
PVALUE eval_and_coerce (INT, PNODE, TABLE, BOOLEAN *);
PVALUE set_pvalue (PVALUE, INT, WORD);
PVALUE valueof_iden (TABLE, STRING);
PVALUE __add (PNODE, TABLE, BOOLEAN *);
PVALUE __ancestorset (PNODE, TABLE, BOOLEAN *);
PVALUE __and (PNODE, TABLE, BOOLEAN *);
PVALUE __bapt (PNODE, TABLE, BOOLEAN *);
PVALUE __birt (PNODE, TABLE, BOOLEAN *);
PVALUE __buri (PNODE, TABLE, BOOLEAN *);
PVALUE __capitalize (PNODE, TABLE, BOOLEAN *);
PVALUE __card (PNODE, TABLE, BOOLEAN *);
PVALUE __child (PNODE, TABLE, BOOLEAN *);
PVALUE __childset (PNODE, TABLE, BOOLEAN *);
PVALUE __choosechild (PNODE, TABLE, BOOLEAN *);
PVALUE __choosefam (PNODE, TABLE, BOOLEAN *);
PVALUE __chooseindi (PNODE, TABLE, BOOLEAN *);
PVALUE __choosespouse (PNODE, TABLE, BOOLEAN *);
PVALUE __choosesubset (PNODE, TABLE, BOOLEAN *);
PVALUE __col (PNODE, TABLE, BOOLEAN *);
PVALUE __concat (PNODE, TABLE, BOOLEAN *);
PVALUE __copyfile (PNODE, TABLE, BOOLEAN *);
PVALUE __d (PNODE, TABLE, BOOLEAN *);
PVALUE __database (PNODE, TABLE, BOOLEAN *);
PVALUE __date (PNODE, TABLE, BOOLEAN *);
PVALUE __dateformat (PNODE, TABLE, BOOLEAN *);
PVALUE __dayformat (PNODE, TABLE, BOOLEAN *);
PVALUE __deat (PNODE, TABLE, BOOLEAN *);
PVALUE __debug (PNODE, TABLE, BOOLEAN *);
PVALUE __deletefromset (PNODE, TABLE, BOOLEAN *);
PVALUE __dequeue (PNODE, TABLE, BOOLEAN *);
PVALUE __descendentset (PNODE, TABLE, BOOLEAN *);
PVALUE __difference (PNODE, TABLE, BOOLEAN *);
PVALUE __div (PNODE, TABLE, BOOLEAN *);
PVALUE __empty (PNODE, TABLE, BOOLEAN *);
PVALUE __enqueue (PNODE, TABLE, BOOLEAN *);
PVALUE __eq (PNODE, TABLE, BOOLEAN *);
PVALUE __eqstr (PNODE, TABLE, BOOLEAN *);
PVALUE __exp (PNODE, TABLE, BOOLEAN *);
PVALUE __extractdate (PNODE, TABLE, BOOLEAN *);
PVALUE __extractnames (PNODE, TABLE, BOOLEAN *);
PVALUE __extractplaces (PNODE, TABLE, BOOLEAN *);
PVALUE __extracttokens (PNODE, TABLE, BOOLEAN *);
PVALUE __f (PNODE, TABLE, BOOLEAN *);
PVALUE __fam (PNODE, TABLE, BOOLEAN *);
PVALUE __fath (PNODE, TABLE, BOOLEAN *);
PVALUE __female (PNODE, TABLE, BOOLEAN *);
PVALUE __firstchild (PNODE, TABLE, BOOLEAN *);
PVALUE __firstfam (PNODE, TABLE, BOOLEAN *);
PVALUE __firstindi (PNODE, TABLE, BOOLEAN *);
PVALUE __fnode (PNODE, TABLE, BOOLEAN *);
PVALUE __freerecord (PNODE, TABLE, BOOLEAN *);
PVALUE __fullname (PNODE, TABLE, BOOLEAN *);
PVALUE __ge (PNODE, TABLE, BOOLEAN *);
PVALUE __gengedcom (PNODE, TABLE, BOOLEAN *);
PVALUE __getcol (PNODE, TABLE, BOOLEAN *);
PVALUE __getel (PNODE, TABLE, BOOLEAN *);
PVALUE __getfam (PNODE, TABLE, BOOLEAN *);
PVALUE __getindi (PNODE, TABLE, BOOLEAN *);
PVALUE __getindiset (PNODE, TABLE, BOOLEAN *);
PVALUE __getrecord (PNODE, TABLE, BOOLEAN *);
PVALUE __gettoday (PNODE, TABLE, BOOLEAN *);
PVALUE __givens (PNODE, TABLE, BOOLEAN *);
PVALUE __gt (PNODE, TABLE, BOOLEAN *);
PVALUE __husband (PNODE, TABLE, BOOLEAN *);
PVALUE __index (PNODE, TABLE, BOOLEAN *);
PVALUE __indi (PNODE, TABLE, BOOLEAN *);
PVALUE __indiset (PNODE, TABLE, BOOLEAN *);
PVALUE __inode (PNODE, TABLE, BOOLEAN *);
PVALUE __insert (PNODE, TABLE, BOOLEAN *);
PVALUE __inset (PNODE, TABLE, BOOLEAN *);
PVALUE __intersect (PNODE, TABLE, BOOLEAN *);
PVALUE __key (PNODE, TABLE, BOOLEAN *);
PVALUE __keysort (PNODE, TABLE, BOOLEAN *);
PVALUE __lastchild (PNODE, TABLE, BOOLEAN *);
PVALUE __lastindi (PNODE, TABLE, BOOLEAN *);
PVALUE __le (PNODE, TABLE, BOOLEAN *);
PVALUE __length (PNODE, TABLE, BOOLEAN *);
PVALUE __lengthset (PNODE, TABLE, BOOLEAN *);
PVALUE __level (PNODE, TABLE, BOOLEAN *);
PVALUE __linemode (PNODE, TABLE, BOOLEAN *);
PVALUE __list (PNODE, TABLE, BOOLEAN *);
PVALUE __long (PNODE, TABLE, BOOLEAN *);
PVALUE __lookup (PNODE, TABLE, BOOLEAN *);
PVALUE __lower (PNODE, TABLE, BOOLEAN *);
PVALUE __lt (PNODE, TABLE, BOOLEAN *);
PVALUE __male (PNODE, TABLE, BOOLEAN *);
PVALUE __marr (PNODE, TABLE, BOOLEAN *);
PVALUE __menuchoose (PNODE, TABLE, BOOLEAN *);
PVALUE __mod (PNODE, TABLE, BOOLEAN *);
PVALUE __monthformat (PNODE, TABLE, BOOLEAN *);
PVALUE __moth (PNODE, TABLE, BOOLEAN *);
PVALUE __mul (PNODE, TABLE, BOOLEAN *);
PVALUE __name (PNODE, TABLE, BOOLEAN *);
PVALUE __namesort (PNODE, TABLE, BOOLEAN *);
PVALUE __nchildren (PNODE, TABLE, BOOLEAN *);
PVALUE __ne (PNODE, TABLE, BOOLEAN *);
PVALUE __neg (PNODE, TABLE, BOOLEAN *);
PVALUE __nestr (PNODE, TABLE, BOOLEAN *);
PVALUE __newfile (PNODE, TABLE, BOOLEAN *);
PVALUE __nextfam (PNODE, TABLE, BOOLEAN *);
PVALUE __nextindi (PNODE, TABLE, BOOLEAN *);
PVALUE __nextsib (PNODE, TABLE, BOOLEAN *);
PVALUE __nfamilies (PNODE, TABLE, BOOLEAN *);
PVALUE __nl (PNODE, TABLE, BOOLEAN *);
PVALUE __not (PNODE, TABLE, BOOLEAN *);
PVALUE __nspouses (PNODE, TABLE, BOOLEAN *);
PVALUE __or (PNODE, TABLE, BOOLEAN *);
PVALUE __ord (PNODE, TABLE, BOOLEAN *);
PVALUE __outfile (PNODE, TABLE, BOOLEAN *);
PVALUE __pagemode (PNODE, TABLE, BOOLEAN *);
PVALUE __pageout (PNODE, TABLE, BOOLEAN *);
PVALUE __parent (PNODE, TABLE, BOOLEAN *);
PVALUE __parents (PNODE, TABLE, BOOLEAN *);
PVALUE __parentset (PNODE, TABLE, BOOLEAN *);
PVALUE __place (PNODE, TABLE, BOOLEAN *);
PVALUE __pn (PNODE, TABLE, BOOLEAN *);
PVALUE __pop (PNODE, TABLE, BOOLEAN *);
PVALUE __pos (PNODE, TABLE, BOOLEAN *);
PVALUE __prevfam (PNODE, TABLE, BOOLEAN *);
PVALUE __previndi (PNODE, TABLE, BOOLEAN *);
PVALUE __prevsib (PNODE, TABLE, BOOLEAN *);
PVALUE __print (PNODE, TABLE, BOOLEAN *);
PVALUE __program (PNODE, TABLE, BOOLEAN *);
PVALUE __push (PNODE, TABLE, BOOLEAN *);
PVALUE __pvalue (PNODE, TABLE, BOOLEAN *);
PVALUE __qt (PNODE, TABLE, BOOLEAN *);
PVALUE __reference (PNODE, TABLE, BOOLEAN *);
PVALUE __requeue (PNODE, TABLE, BOOLEAN *);
PVALUE __rjustify (PNODE, TABLE, BOOLEAN *);
PVALUE __roman (PNODE, TABLE, BOOLEAN *);
PVALUE __rot (PNODE, TABLE, BOOLEAN *);
PVALUE __row (PNODE, TABLE, BOOLEAN *);
PVALUE __save (PNODE, TABLE, BOOLEAN *);
PVALUE __savenode (PNODE, TABLE, BOOLEAN *);
PVALUE __set (PNODE, TABLE, BOOLEAN *);
PVALUE __setel (PNODE, TABLE, BOOLEAN *);
PVALUE __sex (PNODE, TABLE, BOOLEAN *);
PVALUE __short (PNODE, TABLE, BOOLEAN *);
PVALUE __sibling (PNODE, TABLE, BOOLEAN *);
PVALUE __siblingset (PNODE, TABLE, BOOLEAN *);
PVALUE __soundex (PNODE, TABLE, BOOLEAN *);
PVALUE __space (PNODE, TABLE, BOOLEAN *);
PVALUE __spouseset (PNODE, TABLE, BOOLEAN *);
PVALUE __stddate (PNODE, TABLE, BOOLEAN *);
PVALUE __strcmp (PNODE, TABLE, BOOLEAN *);
PVALUE __strlen (PNODE, TABLE, BOOLEAN *);
PVALUE __strsoundex (PNODE, TABLE, BOOLEAN *);
PVALUE __strtoint (PNODE, TABLE, BOOLEAN *);
PVALUE __sub (PNODE, TABLE, BOOLEAN *);
PVALUE __substring (PNODE, TABLE, BOOLEAN *);
PVALUE __surname (PNODE, TABLE, BOOLEAN *);
PVALUE __system (PNODE, TABLE, BOOLEAN *);
PVALUE __table (PNODE, TABLE, BOOLEAN *);
PVALUE __tag (PNODE, TABLE, BOOLEAN *);
PVALUE __titl (PNODE, TABLE, BOOLEAN *);
PVALUE __trim (PNODE, TABLE, BOOLEAN *);
PVALUE __trimname (PNODE, TABLE, BOOLEAN *);
PVALUE __union (PNODE, TABLE, BOOLEAN *);
PVALUE __uniqueset (PNODE, TABLE, BOOLEAN *);
PVALUE __unlock (PNODE, TABLE, BOOLEAN *);
PVALUE __upper (PNODE, TABLE, BOOLEAN *);
PVALUE __value (PNODE, TABLE, BOOLEAN *);
PVALUE __version (PNODE, TABLE, BOOLEAN *);
PVALUE __wife (PNODE, TABLE, BOOLEAN *);
PVALUE __xref (PNODE, TABLE, BOOLEAN *);
PVALUE __year (PNODE, TABLE, BOOLEAN *);
PVALUE ___alpha (PNODE, TABLE, BOOLEAN *);
llqsort (INT, INT);
RECORD getrecord (BTREE, RKEY, INT *);
remove_browse_list (STRING, INDISEQ);
remove_fam_cache (STRING);
remove_from_browse_lists (STRING);
remove_from_cache (CACHE, STRING);
remove_indi_cache (STRING);
remove_list (LIST, int(*)());
remove_table (TABLE, INT);
remove_tables (void);
remove_trantable (TRANTABLE);
remove_xnodes (XNODE);
rename_from_browse_lists (STRING);
rename_indiseq (INDISEQ, STRING);
resolve_links (NODE);
RKEY name2rkey (STRING);
RKEY str2rkey (STRING);
SEQUENCE altseq (SEQUENCE, INT, ELEMENT);
SEQUENCE cpyseq (SEQUENCE);
SEQUENCE crtseq (INT);
SEQUENCE hinsseq (SEQUENCE, ELEMENT);
SEQUENCE insseq (SEQUENCE, INT, ELEMENT);
SEQUENCE joinseq (SEQUENCE, SEQUENCE);
SEQUENCE sinsseq (SEQUENCE, ELEMENT);
SEQUENCE tinsseq (SEQUENCE, ELEMENT);
set_list_element (LIST, INT, WORD);
set_list_type (LIST, INT);
set_parents (PNODE, PNODE);
set_signals (void);
show_aux_display (NODE, INT, INT);
show_database_stats (void);
show_horz_line (WINDOW *, INT, INT, INT);
show_list (INDISEQ, INT, INT, INT);
show_long_family (NODE, INT, INT);
show_node (NODE);
show_node_rec (INT, NODE);
show_open_error (void);
show_pedigree (NODE);
show_person (NODE, INT, INT);
show_pvalue (PVALUE);
show_short_family (NODE, INT, INT);
show_sour_display (NODE, INT, INT);
show_vert_line (WINDOW *, INT, INT, INT);
show_xnode (XNODE);
show_xnodes (INT, XNODE);
shw_list (WINDOW *, INDISEQ, int, INT, INT);
shw_list_of_strings (WINDOW *, STRING *, INT, INT, INT);
sour_to_cache (NODE);
sour_to_dbase (NODE);
split_fam (NODE, NODE *, NODE *, NODE *, NODE *, NODE *);
split_indi (NODE, NODE *, NODE *, NODE *, NODE *, NODE *, NODE *);
STRING *get_child_strings (NODE, INT *, STRING **);
STRING *get_names (STRING, INT *, STRING **, BOOLEAN);
STRING *id_by_key (STRING, STRING **);
STRING addat (STRING);
STRING ask_for_indi_key (STRING, BOOLEAN, BOOLEAN);
STRING ask_for_string (STRING, STRING);
STRING capitalize (STRING);
STRING event_to_date (NODE, TRANTABLE, BOOLEAN);
STRING event_to_plac (NODE, BOOLEAN);
STRING event_to_string (NODE, TRANTABLE, BOOLEAN);
STRING filepath (STRING, STRING, STRING, STRING);
STRING fixtag (STRING);
STRING fixup (STRING);
STRING fkey2path (FKEY);
STRING format_date (STRING, INT, INT, INT, INT);
STRING full_value (NODE);
STRING getexref (void);
STRING getfxref (void);
STRING getixref (void);
STRING getsurname (STRING);
STRING getsxref (void);
STRING getxxref (void);
STRING get_answer (WINDOW *, STRING);
STRING get_date (void);
STRING givens (STRING);
STRING indi_to_event (NODE, TRANTABLE, STRING, STRING, INT, BOOLEAN);
STRING indi_to_list_string (NODE, NODE, INT);
STRING indi_to_name (NODE, TRANTABLE, INT);
STRING indi_to_ped_fix (NODE, INT);
STRING key_of_record (NODE);
STRING lastpathname (STRING);
STRING lower (STRING);
STRING manip_name (STRING, TRANTABLE, BOOLEAN, BOOLEAN, INT);
STRING message_string (void);
STRING name_string (STRING);
STRING name_surfirst (STRING);
STRING node_to_string (NODE);
STRING person_display (NODE, NODE, INT);
STRING pvalue_to_string (PVALUE);
STRING retrieve_record (STRING, INT *);
STRING rightjustify (STRING, INT);
STRING rkey2str (RKEY);
STRING rmvat (STRING);
STRING shorten_date (STRING);
STRING shorten_plac (STRING);
STRING soundex (STRING);
STRING strconcat (STRING, STRING);
STRING strsave (STRING);
STRING substring (STRING, INT, INT);
STRING swrite_node (INT, NODE, STRING);
STRING swrite_nodes (INT, NODE, STRING);
STRING translate_key (STRING);
STRING trim (STRING, INT);
STRING trim_name (STRING, INT);
STRING upper (STRING);
STRING upsurname (STRING);
STRING value_to_xref (STRING);
striptrail (STRING);
sub_pvalues (PVALUE, PVALUE, BOOLEAN *);
TABLE create_table (void);
tandem_browse (NODE, NODE);
trans_menu (void);
TRANTABLE create_trantable (STRING *, STRING *, INT);
TRANTABLE init_map_from_file (STRING, INT, BOOLEAN *);
TRANTABLE init_map_from_rec (INT, BOOLEAN *);
TRANTABLE init_map_from_str (STRING, INT, BOOLEAN *);
traverse_table (TABLE, INT (*)());
twofam_browse (NODE, NODE);
unchar (INT);
unique_indiseq (INDISEQ);
unlock_cache (CACHEEL);
update_browse_list (STRING, INDISEQ);
utils_menu (void);
valuesort_indiseq (INDISEQ);
void classify_nodes (NODE *, NODE *, NODE *);
void delete_pvalue (PVALUE);
void edit_event (NODE);
void edit_other (NODE);
void edit_record (NODE, STRING, INT, STRING, BOOLEAN (*)(), STRING, STRING, INT (*)(), STRING);
void edit_source (NODE);
void index_by_refn (NODE, STRING);
void on_signals (int);
void remove_indiseq (INDISEQ, BOOLEAN);
void rmvseq (SEQUENCE);
void show_one_pnode (PNODE);
void show_pnode (PNODE);
void show_pnodes (PNODE);
void show_trantable (TRANTABLE);
wfield (int, int, STRING);
who_is_he_she (void);
WINDOW *choose_win (INT);
win_list_init (void);
WORD dequeue_list (LIST);
WORD get_list_element (LIST, INT);
WORD pop_list (LIST);
WORD valueof (TABLE, STRING);
WORD valueofbool (TABLE, STRING, BOOLEAN *);
WORD __addnode (PNODE, TABLE, BOOLEAN *);
WORD __addtoset (PNODE, TABLE, BOOLEAN *);
WORD __createnode (PNODE, TABLE, BOOLEAN *);
WORD __decr (PNODE, TABLE, BOOLEAN *);
WORD __deletenode (PNODE, TABLE, BOOLEAN *);
WORD __genindiset (PNODE, TABLE, BOOLEAN *);
WORD __getindidate (PNODE, TABLE, BOOLEAN *);
WORD __getint (PNODE, TABLE, BOOLEAN *);
WORD __getstr (PNODE, TABLE, BOOLEAN *);
WORD __incr (PNODE, TABLE, BOOLEAN *);
WORD __lastfam (PNODE, TABLE, BOOLEAN *);
WORD __lock (PNODE, TABLE, BOOLEAN *);
WORD __valuesort (PNODE, TABLE, BOOLEAN *);
WORD __writefam (PNODE, TABLE, BOOLEAN *);
WORD __writeindi (PNODE, TABLE, BOOLEAN *);
wpos (INT, INT);
/* llwprintf (STRING, INT, INT, INT, INT, INT, INT, INT); */
writeindex (STRING, INDEX);
writexrefs (void);
write_family (STRING, TABLE);
write_node (INT, FILE *, TRANTABLE, NODE, BOOLEAN);
write_nodes (INT, FILE *, TRANTABLE, NODE, BOOLEAN, BOOLEAN, BOOLEAN);
write_nonlink_indi (NODE);
XNODE create_xnode (XNODE, INT, STRING);
XNODE step_xnode (XNODE, INT);
yyerror (STRING);
__assert (BOOLEAN, STRING, int);
__deallocate (char *, STRING, int);
__fatal (STRING, int);
#endif
